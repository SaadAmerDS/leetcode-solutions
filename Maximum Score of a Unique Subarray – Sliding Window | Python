Maximum Erasure Value:
QUESTION/PROBLEM:
You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).

 

Example 1:

Input: nums = [4,2,4,5,6]
Output: 17
Explanation: The optimal subarray here is [2,4,5,6].
Example 2:

Input: nums = [5,2,1,2,5,2,1,2,5]
Output: 8
Explanation: The optimal subarray here is [5,2,1] or [1,2,5].
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 104

SOLUTION:
Intuition
The problem asks us to find a subarray with all unique elements and return the maximum possible sum of such a subarray.

A brute-force approach would involve checking all subarrays and validating their uniqueness, but this would be too slow for large arrays (O(nÂ²)).

Instead, we can use the sliding window technique to maintain a window of unique elements efficiently.

Approach
We use a set to track the unique elements within the current window:

Initialize left pointer at 0, t_sum to track current window sum, and max_sum to store the result.

Iterate using right pointer from 0 to end of array:

If nums[right] is already in the set (i.e., duplicate), we shrink the window from the left side by removing elements and updating the sum until nums[right] is no longer in the set.

Add nums[right] to the set and update t_sum.

Update max_sum with the maximum between current and previous values.

This way, the window always contains unique elements, and we only do linear work thanks to the efficient set operations.

Complexity
Time complexity:
O(n) where n is the length of the input list.
Each element is added and removed from the set at most once.

Space complexity:
O(n) for the hash set storing unique elements in the current window.

CODE:
class Solution:
    def maximumUniqueSubarray(self, nums: List[int]) -> int:
        lis = set()
        left = 0
        t_sum = 0
        max_sum = 0
        for right in range(0, len(nums)):
            while nums[right] in lis:
                lis.remove(nums[left])
                t_sum -= nums[left]
                left += 1
            lis.add(nums[right])
            t_sum += nums[right]
            max_sum = max(t_sum,max_sum)
        return  max_sum
